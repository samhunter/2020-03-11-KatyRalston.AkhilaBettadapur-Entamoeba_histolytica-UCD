
Project Description:
    Katy and Akhila are interested in determining how well their approach to producing knock down libraries is working.

Questions:
    1) How does each sample look? 


Remote working: /share/biocore/projects/Ralston_K_UCD/2020-03-11-KatyRalston.AkhilaBettadapur-Entamoeba_histolytica-UCD


RawData:
/share/biocore/projects/Ralston_K_UCD/2020-03-12-SeqMaticData 
/share/illumina/miseq/200203_M00384_0224_MS9229847-500V2/MiSeqAnalysis/
/share/illumina/miseq/190819_M00384_0188_MS7945297-300V2/MiSeqAnalysis/




######## Start Analysis ###########
# Link in raw data:
cd /share/biocore/projects/Ralston_K_UCD/sh-analysis/

mkdir 00-RawData
ln -s /share/biocore/projects/Ralston_K_UCD/2020-03-12-SeqMaticData/*.gz ./00-RawData/
ln -s /share/illumina/miseq/200203_M00384_0224_MS9229847-500V2/MiSeqAnalysis/*.gz ./00-RawData/
ln -s /share/illumina/miseq/190819_M00384_0188_MS7945297-300V2/MiSeqAnalysis/*.gz ./00-RawData


# Run fastqc and multiqc to generate some information on sample quality

mkdir -p ./00-FastQC/samples/
fastqc -o ./00-FastQC/samples/ -t 60 ./00-RawData/*

module load multiqc
multiqc -d ./00-FastQC/samples/ -i FastQC -o ./00-FastQC/


## Reads per sample:
echo "sample reads adapter" > read_primer_counts.txt
for f in ./00-RawData/*_R1_*.fastq.gz
do
    echo $f
    echo `basename $f` `unpigz -c -p 50 $f | wc -l | awk '{ print $1/4 }'` `unpigz -c -p 50 $f | grep -c TCTTCTGCTTG` >> read_primer_counts.txt
done

## This data is essentially random amplicon data, but the read length is too short to allow overlap in most cases. However, it isn't a good idea to trim either end because then the amplicons won't start/end in the same place.

python 01-cleaning.py
parallel < 01-cleaning_commands.sh


## Also test duplication rate, but only write logs:
python 01-test_dedup.py
parallel < 01-dedup_commands.sh


## Map reads ## 
# Setup reference:
#   previously setup by Matt

python 02-map_reads.py
sh 02-map_reads.sh

mkdir 03-mapping_QC
multiqc -d ./03-sorted -i mappingQC -o 03-mapping_QC


 # Count Unique Fragments:
 # pip3 install intervaltree
 python3 03-count_fragments.py > 03-count_fragments.log

 # Turn output into plots and report
 Rscript -e "rmarkdown::render('03-fragments_profile_analysis.RMD')"




### Get some example contigs for visualization ###

# gDNA from fragmentation A:
samtools view ./03-sorted/B2-FA_sorted.bam -o ./04-example-contig/B2-FA_gDNA_DS571146.bam DS571146:1-210398

# Plasmid from Fragmentation A
samtools view ./03-sorted/gLibA-A5_sorted.bam -o ./04-example-contig/glibA-A5_DS571146.bam DS571146:1-210398

# gDNA from fragmentation B:
samtools view ./03-sorted/D10_FB-1_sorted.bam -o ./04-example-contig/D10_FB-1_DS571146.bam  DS571146:1-210398

# plasmid amplicon from fragmentation B:
samtools view ./03-sorted/F1_LibB1-1_sorted.bam -o ./04-example-contig/F1_LibB1-1_DS571146.bam DS571146:1-210398

# gDNA from fragmentation C:
samtools view ./03-sorted/B4-FC_sorted.bam -o ./04-example-contig/B4-FC_DS571146.bam DS571146:1-210398

# plasmid amplicon from fragmentation C:
samtools view ./03-sorted/C1-LibC1_sorted.bam -o ./04-example-contig/C1-LibC1_DS571146.bam DS571146:1-210398

# plasmid F10, F11 and F12 have strange mapping results:
samtools view ./03-sorted/F10_LibB4-1_sorted.bam -o ./04-example-contig/F10_LibB4-1_DS571146.bam DS571146:1-210398


Observations:
    Fragmentation A:
        gDNA - Fairly uniform coverage across most of the contig.
        Plasmid - only ~5 total sites retained
    Fragmentation B:
        gDNA - again, fairly uniform coverage across the contig
        Plasmid - not as uniform as gDNA, but much of the plasmid is covered
    Fragmentation C:
        gDNA - Lower sequencing depth, but coverage is fairly uniform
        Plasmid - Much more selective, maybe around 35-40 total sites.




from Bio import SeqIO
outf = open('./04-example-contig/DS571146.fasta', 'w')
for rec in SeqIO.parse('./Reference/AmoebaDB-46_EhistolyticaHM1IMSS_Genome.fasta', 'fasta'):
    if rec.id == 'DS571146':
        SeqIO.write(rec, outf, 'fasta')
        break


## Gene coverage and mapping depth:
analysis-depth.txt

Rsubread looks like it allows definition of overlap size and also strandedness, it should be perfect.
http://bioconductor.org/packages/release/bioc/manuals/Rsubread/man/Rsubread.pdf


mkdir 03-coverage_analysis
module load R/3.6.1
Rscript -e "rmarkdown::render('03-coverage_analysis.RMD')"
